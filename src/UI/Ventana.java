/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Estructura.Arista;
import Estructura.Grafo;
import Estructura.Evaluador;
import Estructura.MayorRiesgo;
import Estructura.Vertice;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.util.Random;
import javax.swing.JOptionPane;
import road2covid.pkg19.Lista;

/**
 * Ventana en la cual se visualizará el programa
 *
 * @author Camilo Cespedes, Luisa Escobar, Eduardo Rey
 */
public class Ventana extends javax.swing.JFrame {

    /**
     * Panel en el cual se podrá visualizar el grafo y las interacciones
     */
    private Visualizador visualizador;
    /**
     * Evaluador de caminos y probabilidades de contagio del grafo
     */
    private Evaluador ev;

    private Graphics g;

    /**
     * Crea una nueva Ventana
     */
    public Ventana() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        setSize(700, 540);
        g = paneldeDibujo.getGraphics();
        ev = new Evaluador();
        sig.setVisible(false);
    }

    public void actualizarGrafo() {
        for (Vertice vertice : ev.getGrafo().getVertices()) {
            if (vertice.isContagiado()) {
                g.setColor(Color.red);
                g.fillOval(vertice.getPosX() * 60, vertice.getPosY() * 60, 60, 60);
                g.setColor(Color.black);
                g.drawString("" + vertice.getvID(), vertice.getPosX() * 60 + 25, vertice.getPosY() * 60 + 25);
            } else {
                g.setColor(Color.GREEN);
                g.fillOval(vertice.getPosX() * 60, vertice.getPosY() * 60, 60, 60);
                g.setColor(Color.black);
                g.drawString("" + vertice.getvID(), vertice.getPosX() * 60 + 25, vertice.getPosY() * 60 + 25);
            }
            if (vertice.isMask()) {
                g.setColor(Color.white);
                drawMask((int) vertice.getPosX() * 60, (int) vertice.getPosY() * 60);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneldeDibujo = new javax.swing.JPanel();
        iniciarGrafo = new javax.swing.JButton();
        cantidad = new javax.swing.JTextField();
        numV = new javax.swing.JLabel();
        mask = new javax.swing.JComboBox<>();
        masc = new javax.swing.JLabel();
        iniciar = new javax.swing.JButton();
        sig = new javax.swing.JButton();
        contIteraciones = new javax.swing.JLabel();
        contI = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(758, 477));
        setMinimumSize(new java.awt.Dimension(758, 477));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        paneldeDibujo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        paneldeDibujo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paneldeDibujoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout paneldeDibujoLayout = new javax.swing.GroupLayout(paneldeDibujo);
        paneldeDibujo.setLayout(paneldeDibujoLayout);
        paneldeDibujoLayout.setHorizontalGroup(
            paneldeDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        paneldeDibujoLayout.setVerticalGroup(
            paneldeDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 364, Short.MAX_VALUE)
        );

        getContentPane().add(paneldeDibujo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 730, -1));

        iniciarGrafo.setText("Graficar");
        iniciarGrafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarGrafoActionPerformed(evt);
            }
        });
        getContentPane().add(iniciarGrafo, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 397, 112, 36));
        getContentPane().add(cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 379, 92, 36));

        numV.setText("Número de vértices:");
        getContentPane().add(numV, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 382, 133, 31));

        mask.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos con mascarilla", "Ninguno con mascarilla", "Mascarilla aleatoria" }));
        mask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskActionPerformed(evt);
            }
        });
        getContentPane().add(mask, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 428, -1, -1));

        masc.setText("Mascarilla:");
        getContentPane().add(masc, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 431, -1, -1));

        iniciar.setText("Iniciar Contagio");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });
        getContentPane().add(iniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 380, 140, 60));

        sig.setText("Siguiente Paso");
        sig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sigActionPerformed(evt);
            }
        });
        getContentPane().add(sig, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 390, 120, 40));

        contIteraciones.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        contIteraciones.setText("Iteración: ");
        getContentPane().add(contIteraciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 450, -1, -1));

        contI.setEditable(false);
        contI.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        contI.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(contI, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 450, 80, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarGrafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarGrafoActionPerformed
        int typeMask = mask.getSelectedIndex() + 1;
        if (ev.getGrafo() == null) {
            ev.setGrafo(new Grafo(typeMask, Integer.parseInt(cantidad.getText())));
            graficar();
            System.out.println("");
        } else {
            int sw = JOptionPane.showOptionDialog(
                    null,
                    "¿Está seguro de borrar el grafo anterior?",
                    "Selector de opciones",
                    JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, // null para icono por defecto.
                    null, // null para YES, NO y CANCEL
                    null);
            if (sw == 0) {
                g.clearRect(0, 0, 710, 360);
                removeUbicaciones();
                ev.setGrafo(new Grafo(typeMask, Integer.parseInt(cantidad.getText())));
                ev.setIteraciones(0);
                contI.setText("" + ev.getIteraciones());
                iniciar.setVisible(true);
                sig.setVisible(false);
                graficar();
            }

        }
        cantidad.setText("");
    }//GEN-LAST:event_iniciarGrafoActionPerformed

    private void paneldeDibujoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paneldeDibujoMouseClicked

        for (Vertice vertice : ev.getGrafo().getVertices()) {

            int x = (int) (paneldeDibujo.getMousePosition().x / 60);
            int y = (int) (paneldeDibujo.getMousePosition().y / 60);

            if (x == vertice.getPosX()
                    && y == vertice.getPosY()) {
                graficar();
                x = x * 60;
                y = y * 60;
                if (vertice.isContagiado()) {
                    g.setColor(Color.red);
                    g.fillOval(x, y, 60, 60);
                    g.setColor(Color.black);
                    g.drawString("" + vertice.getvID(), vertice.getPosX() * 60 + 25, vertice.getPosY() * 60 + 25);
                    StringBuffer sb = new StringBuffer("");
                    for (Arista arista : vertice.getAristas()) {
                        if (!arista.getvTerminal().isContagiado()) {
                            sb.append(arista.getvTerminal().getvID() + ", ");
                        }
                    }
                    JOptionPane.showMessageDialog(null, "El nodo " + vertice.getvID() + " puede contagiar a los nodos " + sb);
                } else {
                    g.setColor(Color.GREEN);
                    g.fillOval(x, y, 60, 60);
                    g.setColor(Color.black);
                    g.drawString("" + vertice.getvID(), vertice.getPosX() * 60 + 25, vertice.getPosY() * 60 + 25);
                    Lista<Vertice> camino = MayorRiesgo.FWarshall(ev.getGrafo().getMA(), ev.getGrafo(), vertice);
                    StringBuffer sb = new StringBuffer("");
                    if (camino != null) {
                        for (Vertice vertice1 : camino) {
                            sb.append(vertice1.getvID() + " ");
                        }
                        JOptionPane.showMessageDialog(null, "El camino de mayor riesgo para el nodo " + vertice.getvID() + " es: " + sb);
                    }
                }
                if (vertice.isMask()) {
                    g.setColor(Color.white);
                    drawMask(x, y);
                }
                g.setColor(Color.YELLOW);

                for (Arista arista : vertice.getAristas()) {

                    Vertice v;
                    if (arista.getvInicial().equals(vertice)) {
                        v = arista.getvTerminal();
                    } else {
                        v = arista.getvInicial();
                    }

                    int x1 = v.getPosX() * 60;
                    int y1 = v.getPosY() * 60;

                    g.drawLine(x + 30, y + 30, x1 + 30, y1 + 30);
                }

                break;
            }

        }
    }//GEN-LAST:event_paneldeDibujoMouseClicked

    private void maskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maskActionPerformed

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        if (ev.getGrafo() != null) {
            Random r = new Random();
            int vID_random = r.nextInt(ev.getGrafo().getVertices().size() - 1) + 1;
            ev.contagiar(vID_random);
            actualizarGrafo();
            iniciar.setVisible(false);
            sig.setVisible(true);
            ev.setIteraciones(ev.getIteraciones() + 1);
            contI.setText("" + ev.getIteraciones());
        } else {
            JOptionPane.showMessageDialog(null, "Por favor inicie su grafo antes que nada, \n sino, no hay a quien contagiar", "ERROR", 0);
        }
    }//GEN-LAST:event_iniciarActionPerformed

    private void sigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sigActionPerformed
        if (ev.getGrafo().isAllInfected()) {
            JOptionPane.showMessageDialog(null, "Lastimosamente, ya todos fueron contagiados.");
        } else {
            ev.getGrafo().contagiar();
            actualizarGrafo();
            ev.setIteraciones(ev.getIteraciones() + 1);
            contI.setText("" + ev.getIteraciones());
        }
    }//GEN-LAST:event_sigActionPerformed

    public void graficar() {
        crearUbicaciones(ev.getGrafo().getVertices().size());
        for (Vertice vertice : ev.getGrafo().getVertices()) {

            g.setColor(java.awt.Color.black);

            int x = vertice.getPosX() * 60;
            int y = vertice.getPosY() * 60;
            for (Arista arista : vertice.getAristas()) {

                int x1 = arista.getvTerminal().getPosX() * 60;
                int y1 = arista.getvTerminal().getPosY() * 60;
                g.drawLine(x + 30, y + 30, x1 + 30, y1 + 30);
            }

            g.setColor(java.awt.Color.black);
            g.fillOval(x, y, 60, 60);

            g.setColor(java.awt.Color.white);
            g.setFont(new Font("Tahoma", 0, 24));
            g.drawString("" + vertice.getvID(), vertice.getPosX() * 60 + 25, vertice.getPosY() * 60 + 25);

            if (vertice.isMask()) {
                drawMask(x, y);

            }
        }
    }

    public void crearUbicaciones(int n) {

        int altura = paneldeDibujo.getHeight() / 60;
        int area = paneldeDibujo.getWidth() / 60;
        int x = 0, y = 0;
        for (int i = 0; i < n; i++) {
            do {
                x = (int) (Math.random() * area);
                y = (int) (Math.random() * altura);

            } while (comprobarUbicacion(x, y) && x != 0 && y != 0);
        }
    }

    public boolean comprobarUbicacion(int x, int y) {
        for (Vertice u : ev.getGrafo().getVertices()) {
            if (u.getPosX() == x && u.getPosY() == y) {
                return true;
            }
        }
        for (Vertice u : ev.getGrafo().getVertices()) {
            if (u.getPosX() == 0 && u.getPosY() == 0) {
                u.setPosX(x);
                u.setPosY(y);
                break;
            }
        }
        return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cantidad;
    private javax.swing.JTextField contI;
    private javax.swing.JLabel contIteraciones;
    private javax.swing.JButton iniciar;
    private javax.swing.JButton iniciarGrafo;
    private javax.swing.JLabel masc;
    private javax.swing.JComboBox<String> mask;
    private javax.swing.JLabel numV;
    private javax.swing.JPanel paneldeDibujo;
    private javax.swing.JButton sig;
    // End of variables declaration//GEN-END:variables

    private void removeUbicaciones() {
        for (Vertice vertice : ev.getGrafo().getVertices()) {
            vertice.setPosX(0);
            vertice.setPosY(0);
        }
    }

    private void drawMask(int x, int y) {
        g.drawLine(x, (int) (y + 30), (int) (x + 16), (int) (y + 37.5));
        g.drawLine(x + 30, (int) (y + 49), (int) (x + 7.5), (int) (y + 45));
        g.drawLine(x + 60, (int) (y + 30), (int) (x + 45), (int) (y + 37.5));
        g.drawLine(x + 30, (int) (y + 49), (int) (x + 55), (int) (y + 45));
        g.fillOval((int) (x + 15), y + 30, 30, 30);
    }
}
